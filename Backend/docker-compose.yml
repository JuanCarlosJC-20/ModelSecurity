services:
  # ---------------- FRONTEND ----------------
  frontend:
    build: 
      context: ../frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:80"
    depends_on:
      - modelsecurity-api
    restart: unless-stopped
    networks:
      - modelsecurity-network

  # ---------------- API ----------------
  modelsecurity-api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: modelsecurity-api
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_HTTP_PORTS=8080

      # Conexiones (ajústalas en tu appsettings.json para leer de ENV)
      - ConnectionStrings__MySqlConnection=Server=mysql;Port=3306;Database=ModelSecurity;User=root;Password=1234567
      - ConnectionStrings__PostgresDb=Host=postgres;Port=5432;Database=ModelSecurity;Username=postgres;Password=1234567
      - ConnectionStrings__SqlServerConnection=Server=sqlserver;Database=ModelSecurity;User Id=sa;Password=SqlServer2025!;Encrypt=false;TrustServerCertificate=true;MultipleActiveResultSets=true;
      
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
    depends_on:
      mysql:
        condition: service_healthy
      postgres:
        condition: service_healthy
      sqlserver:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - modelsecurity-network

  # ---------------- MYSQL ----------------
  mysql:
    image: mysql:8.0
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1234567
      MYSQL_DATABASE: ModelSecurity
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - modelsecurity-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # ---------------- POSTGRES ----------------
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234567
      POSTGRES_DB: ModelSecurity
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - modelsecurity-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      timeout: 20s
      retries: 10

  # ---------------- SQL SERVER ----------------
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver_db
    restart: always
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "SqlServer2025!"
      MSSQL_PID: "Express"
      MSSQL_ENCRYPT: "false"
      MSSQL_TRUST_SERVER_CERTIFICATE: "true"
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - modelsecurity-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P SqlServer2025! -C -Q 'SELECT 1'"]
      timeout: 30s
      retries: 5
      interval: 10s
      start_period: 60s

# ---------------- Volúmenes persistentes ----------------
volumes:
  mysql_data:
  postgres_data:
  sqlserver_data:

# ---------------- Red interna ----------------
networks:
  modelsecurity-network:
    driver: bridge
